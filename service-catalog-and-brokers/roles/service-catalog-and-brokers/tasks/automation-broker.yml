---
- name: Check if CSV is Installed
  command: oc get csv --all-namespaces -o jsonpath='{.items[?(@.metadata.name=="{{ _automation_broker_subscription_csv }}")].metadata.namespace}'
  register: csv_namespace

- name: Set servicebroker install fact
  set_fact:
    install_broker: csv_namespace.stdout == ""

- name: Show where Automation Broker is installed
  debug:
    msg: "Automation broker was already installed in {{ csv_namespace.stdout }}"
  when: not install_broker|bool

- name: Create OpenShift Objects for Automation Broker
  k8s:
    state: present
    merge_type:
    - strategic-merge
    - merge
    definition: "{{ lookup('template', item ) | from_yaml }}"
  loop:
  - ./templates/automationbroker/broker_project.j2
  - ./templates/automationbroker/operator_group.j2
  - ./templates/automationbroker/catalog_source.j2
  - ./templates/automationbroker/subscription.j2
  when: install_broker|bool

- name: Wait until CSV is Installed
  command: oc get csv "{{ _automation_broker_subscription_csv }}" -o jsonpath --template='{.status.phase}' -n "{{ _automation_broker_project }}"
  register: csv
  retries: 30
  delay: 10
  until: csv.stdout == "Succeeded"
  when: install_broker|bool

- name: Create Automation Broker
  k8s:
    state: present
    merge_type:
    - strategic-merge
    - merge
    definition: "{{ lookup('template', item ) | from_yaml }}"
  loop:
  - ./templates/automationbroker/automation_broker.j2
  when: install_broker|bool

- name: Grant Automation Broker Service Account cluster-admin
  k8s:
    state: present
    merge_type:
    - strategic-merge
    - merge
    definition: "{{ lookup('template', './templates/automationbroker/cluster_role_binding.j2' ) | from_yaml }}"
  when: install_broker|bool